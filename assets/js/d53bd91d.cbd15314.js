"use strict";(self.webpackChunkpenguin_empire_github_io=self.webpackChunkpenguin_empire_github_io||[]).push([[9437],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>v});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=t.createContext({}),l=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,v=m["".concat(p,".").concat(d)]||m[d]||s[d]||i;return r?t.createElement(v,o(o({ref:n},u),{},{components:r})):t.createElement(v,o({ref:n},u))}));function v(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c[m]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=r[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7194:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=r(7462),a=(r(7294),r(3905));const i={sidebar_position:5},o="OpenCV",c={unversionedId:"advanced-topics/opencv",id:"advanced-topics/opencv",title:"OpenCV",description:"- OpenCV.org",source:"@site/docs/advanced-topics/opencv.md",sourceDirName:"advanced-topics",slug:"/advanced-topics/opencv",permalink:"/docs/advanced-topics/opencv",draft:!1,editUrl:"https://github.com/PenguinEmpire/PenguinEmpire.github.io/tree/main/docs/advanced-topics/opencv.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"StereoLabs Zed camera",permalink:"/docs/advanced-topics/stereolabs-zed"},next:{title:"Robot Operating System (ROS)",permalink:"/docs/advanced-topics/ros"}},p={},l=[{value:"OpenCV Image Capture (color) Example",id:"opencv-image-capture-color-example",level:3},{value:"OpenCV Image capture (greyscale) Example",id:"opencv-image-capture-greyscale-example",level:3},{value:"Crop and training with Cascade Trainer GUI",id:"crop-and-training-with-cascade-trainer-gui",level:3}],u={toc:l};function m(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"opencv"},"OpenCV"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://opencv.org/"},"OpenCV.org")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.opencv.org/4.1.1/"},"OpenCV v4.1.1")," works well with Python 2")),(0,a.kt)("h3",{id:"opencv-image-capture-color-example"},"OpenCV Image Capture (color) Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import cv2\n\nwebcam=cv2.VideoCapture(1)\n\ni=0\n\nwhile (i<30):\n    control,frame=webcam.read()\n    cv2.imshow("Frames",frame)\n    cv2.waitKey(0)\n    cv2.imwrite("count"+str(i)+".jpg",frame)\n    i+=1\n    if (cv2.waitKey(10) & 0xFF==ord(\'q\')):\n        break\n')),(0,a.kt)("h3",{id:"opencv-image-capture-greyscale-example"},"OpenCV Image capture (greyscale) Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import cv2\n\nwebcam=cv2.VideoCapture(1)\n\ni=0\n\nwhile (i<30):\n    control,frame=webcam.read()\n    gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)\n    cv2.imshow("Frames",gray)\n    cv2.waitKey(0)\n    cv2.imwrite("count"+str(i)+".jpg",gray)\n    i+=1\n    if (cv2.waitKey(10) & 0xFF==ord(\'q\')):\n        break\n')),(0,a.kt)("h3",{id:"crop-and-training-with-cascade-trainer-gui"},"Crop and training with Cascade Trainer GUI"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://amin-ahmadi.com/cascade-trainer-gui/"},"Cascade Trainer GUI - Amin"))),(0,a.kt)("p",null,"Training generates a XML files (adurino.xml) that can be parsed in here..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import cv2\n\nwebcam=cv2.VideoCapture(1)\n\ndef arduino(webcam):\n    arduino_xml=cv2.CascadeClassifier("arduino.xml")\n    while (True):\n        control,frame=webcam.read()\n        gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)\n        result=arduino_xml.detectMultiScale(gray,1.1,4)\n        for (x,y,w,h) in result:\n            cv2.putText(frame,"Arduino",(x,y-10),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0),3)\n            cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),4)\n        if (cv2.waitKey(10) & 0xFF==ord(\'q\')):\n            break\n        cv2.imshow("Arduino",frame)\n\nwhile (True):\n    arduino(webcam)\n')))}m.isMDXComponent=!0}}]);