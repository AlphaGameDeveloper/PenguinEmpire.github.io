"use strict";(self.webpackChunkpenguin_empire_github_io=self.webpackChunkpenguin_empire_github_io||[]).push([[9437],{3905:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>v});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=t.createContext({}),l=function(e){var r=t.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},u=function(e){var r=l(e.components);return t.createElement(p.Provider,{value:r},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,v=m["".concat(p,".").concat(d)]||m[d]||s[d]||i;return n?t.createElement(v,o(o({ref:r},u),{},{components:n})):t.createElement(v,o({ref:r},u))}));function v(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var p in r)hasOwnProperty.call(r,p)&&(c[p]=r[p]);c.originalType=e,c[m]="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7194:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=n(7462),a=(n(7294),n(3905));const i={sidebar_position:5},o="OpenCV",c={unversionedId:"advanced-topics/opencv",id:"advanced-topics/opencv",title:"OpenCV",description:"Computer Vision Library",source:"@site/docs/advanced-topics/opencv.md",sourceDirName:"advanced-topics",slug:"/advanced-topics/opencv",permalink:"/docs/advanced-topics/opencv",draft:!1,editUrl:"https://github.com/PenguinEmpire/PenguinEmpire.github.io/tree/main/docs/advanced-topics/opencv.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Zed camera",permalink:"/docs/advanced-topics/stereolabs-zed"},next:{title:"Robot Operating System",permalink:"/docs/advanced-topics/ros"}},p={},l=[{value:"OpenCV Image Capture (color) Example",id:"opencv-image-capture-color-example",level:3},{value:"OpenCV Image capture (greyscale) Example",id:"opencv-image-capture-greyscale-example",level:3},{value:"Crop and training with Cascade Trainer GUI",id:"crop-and-training-with-cascade-trainer-gui",level:3}],u={toc:l};function m(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"opencv"},"OpenCV"),(0,a.kt)("p",null,"Computer Vision Library "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://opencv.org/"},"OpenCV.org")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.opencv.org/4.1.1/"},"OpenCV v4.1.1")," works well with Python 2")),(0,a.kt)("h3",{id:"opencv-image-capture-color-example"},"OpenCV Image Capture (color) Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import cv2\n\nwebcam=cv2.VideoCapture(1)\n\ni=0\n\nwhile (i<30):\n    control,frame=webcam.read()\n    cv2.imshow("Frames",frame)\n    cv2.waitKey(0)\n    cv2.imwrite("count"+str(i)+".jpg",frame)\n    i+=1\n    if (cv2.waitKey(10) & 0xFF==ord(\'q\')):\n        break\n')),(0,a.kt)("h3",{id:"opencv-image-capture-greyscale-example"},"OpenCV Image capture (greyscale) Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import cv2\n\nwebcam=cv2.VideoCapture(1)\n\ni=0\n\nwhile (i<30):\n    control,frame=webcam.read()\n    gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)\n    cv2.imshow("Frames",gray)\n    cv2.waitKey(0)\n    cv2.imwrite("count"+str(i)+".jpg",gray)\n    i+=1\n    if (cv2.waitKey(10) & 0xFF==ord(\'q\')):\n        break\n')),(0,a.kt)("h3",{id:"crop-and-training-with-cascade-trainer-gui"},"Crop and training with Cascade Trainer GUI"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://amin-ahmadi.com/cascade-trainer-gui/"},"Cascade Trainer GUI - Amin"))),(0,a.kt)("p",null,"Training generates a XML files (adurino.xml) that can be parsed in here..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import cv2\n\nwebcam=cv2.VideoCapture(1)\n\ndef arduino(webcam):\n    arduino_xml=cv2.CascadeClassifier("arduino.xml")\n    while (True):\n        control,frame=webcam.read()\n        gray=cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)\n        result=arduino_xml.detectMultiScale(gray,1.1,4)\n        for (x,y,w,h) in result:\n            cv2.putText(frame,"Arduino",(x,y-10),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0),3)\n            cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),4)\n        if (cv2.waitKey(10) & 0xFF==ord(\'q\')):\n            break\n        cv2.imshow("Arduino",frame)\n\nwhile (True):\n    arduino(webcam)\n')))}m.isMDXComponent=!0}}]);